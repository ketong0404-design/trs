name: Build Windows EXE from Notebook

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        shell: pwsh
        run: |
          python -V
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") {
            pip install -r requirements.txt
          } else {
            pip install pandas==2.2.2 numpy==1.26.4 openpyxl==3.1.5 pyinstaller==6.10.0 jupyter==1.0.0 nbconvert==7.16.4 tksheet==7.2.14
          }
          pip show pandas numpy openpyxl pyinstaller nbconvert tksheet | findstr /R /C:"Name:" /C:"Version:"

      # 将源代码规范化为 trade_parser_app.py（支持 .py / .ipynb / .ipyn）
      - name: Detect or convert Notebook -> trade_parser_app.py
        shell: pwsh
        run: |
          $outPy = "trade_parser_app.py"
          $generated = $false

          if (Test-Path $outPy) {
            Write-Host "Found $outPy, skip conversion."
            $generated = $true
          }

          if (-not $generated) {
            # 1) 优先找现成 trade_parser_app.py 或任意 .py
            $py = Get-ChildItem -Recurse -File -Include *.py | Where-Object { $_.Name -eq "trade_parser_app.py" } | Select-Object -First 1
            if (-not $py) {
              $py = Get-ChildItem -Recurse -File -Include *.py | Select-Object -First 1
            }
            if ($py) {
              Copy-Item $py.FullName $outPy -Force
              Write-Host "Copied existing .py as $outPy"
              $generated = $true
            }
          }

          if (-not $generated) {
            # 2) 找 .ipynb / .ipyn
            $nb = Get-ChildItem -Recurse -File -Include *.ipynb,*.ipyn | Select-Object -First 1
            if (-not $nb) {
              Write-Error "No .py/.ipynb/.ipyn found. Add your source file to the repo."
              exit 1
            }
            Write-Host "Found: $($nb.FullName)"

            # .ipyn -> 复制为 .ipynb 以便 nbconvert
            $tmpNb = $nb.FullName
            if ($nb.Extension -ieq ".ipyn") {
              $tmpNb = [System.IO.Path]::ChangeExtension($nb.FullName, ".ipynb")
              Copy-Item $nb.FullName $tmpNb -Force
              Write-Host "Copied to $tmpNb for nbconvert"
            }

            # 尝试 JSON 解析以判断是否为合法 Notebook
            $isJson = $true
            try {
              Get-Content -Raw -LiteralPath $tmpNb | ConvertFrom-Json | Out-Null
            } catch {
              $isJson = $false
            }

            if ($isJson) {
              # 合法 .ipynb -> 使用 nbconvert
              python -m jupyter nbconvert --to=script "$tmpNb" --output "trade_parser_app"
              if (Test-Path "trade_parser_app.py.py") {
                Move-Item "trade_parser_app.py.py" "trade_parser_app.py" -Force
              }
              if (-not (Test-Path $outPy)) {
                Write-Error "nbconvert did not produce $outPy"
                Get-ChildItem -File | Format-Table
                exit 1
              }
              $generated = $true
            } else {
              # 不是 JSON，大概率是 .py 被误命名；直接当脚本复制
              Copy-Item $tmpNb $outPy -Force
              Write-Host "Source is not JSON; treated as .py and saved to $outPy"
              $generated = $true
            }
          }

          if (-not $generated) {
            Write-Error "Failed to produce $outPy"
            exit 1
          }

          # 去掉 IPython 魔法（若存在）
          (Get-Content $outPy) `
            | Where-Object { $_ -notmatch 'get_ipython\(' -and $_ -notmatch '^\s*[%!]' -and $_ -notmatch 'ipykernel' } `
            | Set-Content $outPy -Encoding UTF8

          # 若脚本无 main 入口则补上
          $hasMain = Select-String -Path $outPy -Pattern '__main__' -Quiet
          if (-not $hasMain) {
            Add-Content $outPy "`nif __name__ == '__main__':`n    App().mainloop()`n"
            Write-Host "App entry added to $outPy"
          }

          Write-Host "=== Head of generated $outPy ==="
          Get-Content $outPy -TotalCount 40 | ForEach-Object { Write-Host $_ }

      - name: List files before build
        shell: pwsh
        run: |
          Write-Host "=== Working directory ==="
          pwd
          Get-ChildItem -Force | Format-Table Name,Length
      - name: Sanity check imports (must succeed)
        shell: pwsh
        run: |
          Set-Content -Path sanity_check.py -Encoding UTF8 -Value "import sys"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "print('python:', sys.version)"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "import pandas, numpy, openpyxl, tkinter"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "try:"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "    import tksheet"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "    print('tksheet:', tksheet.__version__)"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "except Exception:"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "    print('tksheet: not installed (optional)')"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "print('pandas:', pandas.__version__)"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "print('numpy:', numpy.__version__)"
          Add-Content -Path sanity_check.py -Encoding UTF8 -Value "print('openpyxl:', openpyxl.__version__)"
          python sanity_check.py

      - name: Build EXE (onefile)
        shell: pwsh
        run: |
          $args = @(
            "--noconsole","--onefile",
            "--name","trade_parser_app",
            "--collect-all","pandas",
            "--collect-all","numpy",
            "--collect-all","numpy.libs",
            "--collect-all","openpyxl",
            "--collect-all","tksheet",
            "--hidden-import","tkinter",
            "--hidden-import","pandas",
            "--hidden-import","numpy",
            "--hidden-import","openpyxl",
            "--hidden-import","tksheet",
            "--log-level","INFO"
          )
          if (Test-Path "app.ico") { $args += @("--icon","app.ico") }
          $args += "trade_parser_app.py"
          Write-Host "PyInstaller args: $args"
          pyinstaller @args

      - name: Upload artifact (onefile)
        uses: actions/upload-artifact@v4
        with:
          name: trade_parser_app-onefile
          path: dist/trade_parser_app.exe

      - name: Build folder (onedir)
        shell: pwsh
        run: |
          $args = @(
            "--noconsole","--onedir",
            "--name","trade_parser_app",
            "--collect-all","pandas",
            "--collect-all","numpy",
            "--collect-all","numpy.libs",
            "--collect-all","openpyxl",
            "--collect-all","tksheet",
            "--hidden-import","tkinter",
            "--hidden-import","pandas",
            "--hidden-import","numpy",
            "--hidden-import","openpyxl",
            "--hidden-import","tksheet",
            "--log-level","INFO"
          )
          if (Test-Path "app.ico") { $args += @("--icon","app.ico") }
          $args += "trade_parser_app.py"
          Write-Host "PyInstaller args: $args"
          pyinstaller @args

      - name: Upload artifact (onedir)
        uses: actions/upload-artifact@v4
        with:
          name: trade_parser_app-onedir
          path: dist/trade_parser_app/**
